{"version":3,"sources":["CellarBox.js","Cellar.js","BottleInfo.js","App.js","serviceWorker.js","index.js"],"names":["binlookup","x","y","CellarBox","bottles","onHighlight","onNoHighlight","binned","forEach","quad","push","allbots","bin","binidx","bots","map","bot","botidx","loc","trans","key","r","transform","onMouseEnter","bottle","onMouseLeave","splice","length","className","width","height","x1","y1","x2","y2","PlaceholderBox","props","bincolumns","label","Cellar","user","pass","useState","data","setData","useEffect","url","csv","then","catch","bindata","Array","from","elt","binarr","Bin","split","box","console","error","columns","col","colidx","rows","row","rowidx","BottleInfo","iWine","id","Vintage","Wine","Varietal","href","getCookie","cname","name","ca","decodeURIComponent","document","cookie","i","c","charAt","substring","indexOf","App","setUser","setPass","setBottle","htmlFor","defaultValue","type","onSubmit","username","getElementById","value","password","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.aa5a06e6.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./CellarBox.css\";\n\n// For each of the four bins, the positions of three possible bottles in it.\nvar binlookup = [\n  [\n    { x: 50, y: 35 },\n    { x: 35, y: 20 },\n    { x: 65, y: 20 }\n  ],\n  [\n    { x: 80, y: 65 },\n    { x: 65, y: 50 },\n    { x: 80, y: 35 }\n  ],\n  [\n    { x: 35, y: 90 },\n    { x: 65, y: 90 },\n    { x: 50, y: 75 }\n  ],\n  [\n    { x: 20, y: 65 },\n    { x: 35, y: 50 },\n    { x: 20, y: 35 }\n  ]\n];\n\n// A cellar box represnts one box in the cellar, with four\n// sub-compartments that hold 2-3 bottles each.\n//\nexport const CellarBox = ({ bottles, onHighlight, onNoHighlight }) => {\n  // Map bottles to bins.\n  let binned = [[], [], [], []];\n  bottles.forEach(x => {\n    binned[x.quad - 1].push(x);\n  });\n  // For each bottle, figure out where it belongs\n  let allbots = [];\n  binned.forEach((bin, binidx) => {\n    let bots = bin.map((bot, botidx) => {\n      let loc = binlookup[binidx][botidx];\n      let trans = `translate(${loc.x},${loc.y})`;\n      return (\n        <circle\n          key={binidx + \"-\" + botidx}\n          r=\"8\"\n          transform={trans}\n          onMouseEnter={() => {\n            onHighlight(bot.bottle);\n          }}\n          onMouseLeave={() => {\n            onNoHighlight();\n          }}\n        />\n      );\n    });\n    allbots.splice(allbots.length, 0, ...bots);\n  });\n  return (\n    <div className=\"CellarBoxContainer\">\n      <div className=\"CellarBox\">\n        <svg width=\"100\" height=\"100\">\n          <line x1=\"0\" y1=\"0\" x2=\"100\" y2=\"100\" />\n          <line x1=\"100\" y1=\"0\" x2=\"0\" y2=\"100\" />\n          {allbots}\n        </svg>\n      </div>\n    </div>\n  );\n};\n\nexport const PlaceholderBox = props => {\n  return <div className=\"Placeholder\"></div>;\n};\n","// Cellar.js\nimport React, { useState, useEffect } from \"react\";\nimport { CellarBox, PlaceholderBox } from \"./CellarBox\";\nimport { csv } from \"d3-fetch\";\nimport \"./Cellar.css\";\n\nlet bincolumns = [\n  [null, null, 34, 35, 36, { label: \"Aging wine\" }],\n  [null, null, 1, 6, 11, { label: \"Special\" }],\n  [null, null, 2, 7, 12, { label: \"World\" }],\n  [null, null, 3, 8, 13, { label: \"France\" }],\n  [null, null, 4, 9, 14, { label: \"Italy\" }],\n  [null, null, 5, 10, 15, { label: \"US-CA\" }],\n  [null, null, null, 24, 29, { label: \"US-CA\" }],\n  [null, null, 20, 25, 30, { label: \"US-CA\" }],\n  [null, 17, 21, 26, 31, { label: \"US-Other\" }],\n  [null, 18, 22, 27, 32, { label: \"US-Other\" }],\n  [16, 19, 23, 28, 33, { label: \"White & Sweet\" }]\n];\n\nexport const Cellar = ({ user, pass, onHighlight, onNoHighlight }) => {\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    let url =\n      \"https://www.cellartracker.com/xlquery.asp?table=Inventory&User=\" +\n      user +\n      \"&Password=\" +\n      pass +\n      \"&Format=csv\";\n\n    csv(url)\n      .then(data => setData(data))\n      .catch(() => {});\n  }, [user, pass]);\n\n  // FIXME: This syntax seems wrong.  And the hard-coded constant is unfortunate.\n  let bindata = Array.from(Array(40)).map(() => []);\n\n  data.forEach(elt => {\n    let binarr = elt.Bin.split(\"-\");\n    if (binarr.length === 2) {\n      let bot = { box: binarr[0], quad: binarr[1], bottle: elt };\n      bindata[binarr[0]].push(bot);\n    } else {\n      console.error(`Unknown bin: ${elt.Bin}`);\n      console.error(elt);\n    }\n  });\n\n  let columns = bincolumns.map((col, colidx) => {\n    let rows = col.map((row, rowidx) => {\n      if (row == null) {\n        return <PlaceholderBox key={rowidx} />;\n      } else if (typeof row === \"object\") {\n        return (\n          <div key={rowidx} className=\"Label\">\n            {row.label}\n          </div>\n        );\n      }\n      return (\n        <CellarBox\n          key={rowidx}\n          bottles={bindata[row]}\n          onHighlight={onHighlight}\n          onNoHighlight={onNoHighlight}\n        />\n      );\n    });\n    return (\n      <div key={colidx} className=\"CellarColumn\">\n        {rows}\n      </div>\n    );\n  });\n  return <div>{columns}</div>;\n};\n","import React from \"react\";\n\nexport const BottleInfo = ({ bottle }) => {\n  if (bottle) {\n    const url =\n      \"https://www.cellartracker.com/inmycellar.asp?iWine=\" + bottle.iWine;\n    return (\n      <div id=\"tooltip\">\n        <table>\n          <tbody>\n            <tr>\n              <td id=\"name\">{bottle.Vintage + \" \" + bottle.Wine}</td>\n            </tr>\n            <tr>\n              <td id=\"varietal\">{bottle.Varietal}</td>\n            </tr>\n            <tr>\n              <td id=\"bin\">{bottle.Bin}</td>\n            </tr>\n            <tr>\n              <td id=\"link\">\n                <a href={url}>link</a>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    );\n  } else {\n    return <div id=\"tooltip\"></div>;\n  }\n};\n","import React, { useState } from \"react\";\nimport { Cellar } from \"./Cellar\";\nimport { BottleInfo } from \"./BottleInfo\";\nimport \"./App.css\";\n\nfunction getCookie(cname) {\n  var name = cname + \"=\";\n  var decodedCookie = decodeURIComponent(document.cookie);\n  var ca = decodedCookie.split(\";\");\n  for (var i = 0; i < ca.length; i++) {\n    var c = ca[i];\n    while (c.charAt(0) === \" \") {\n      c = c.substring(1);\n    }\n    if (c.indexOf(name) === 0) {\n      return c.substring(name.length, c.length);\n    }\n  }\n  return \"\";\n}\n\nconst App = props => {\n  let [user, setUser] = useState(getCookie(\"username\"));\n  let [pass, setPass] = useState(getCookie(\"password\"));\n  let [bottle, setBottle] = useState(null);\n\n  const doForm = () => {\n    let username = document.getElementById(\"username\").value;\n    let password = document.getElementById(\"password\").value;\n    setUser(username);\n    setPass(password);\n    document.cookie = \"username=\" + username + \";\";\n    document.cookie = \"password=\" + password + \";\";\n  };\n\n  const onHighlight = bottle => {\n    setBottle(bottle);\n  };\n\n  const onNoHighlight = () => {\n    setBottle(null);\n  };\n\n  return (\n    <div>\n      <div id=\"connection\">\n        <form>\n          <label htmlFor=\"username\">User: </label>\n          <input\n            id=\"username\"\n            name=\"username\"\n            defaultValue={user}\n            type=\"text\"\n            width=\"16\"\n          />\n          <label htmlFor=\"password\">Password: </label>\n          <input\n            id=\"password\"\n            name=\"password\"\n            type=\"password\"\n            defaultValue={pass}\n            width=\"24\"\n          />\n          <input onSubmit={doForm} type=\"button\" value=\"Reconnect\" />\n        </form>\n        <div id=\"error\"></div>\n      </div>\n      <Cellar\n        user={user}\n        pass={pass}\n        onHighlight={onHighlight}\n        onNoHighlight={onNoHighlight}\n      />\n      <BottleInfo bottle={bottle} />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}